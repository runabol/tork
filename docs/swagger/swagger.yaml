basePath: /
definitions:
  api.HealthResponse:
    properties:
      status:
        type: string
    type: object
  echo.HTTPError:
    properties:
      message: {}
    type: object
  input.AuxTask:
    properties:
      cmd:
        items:
          type: string
        type: array
      description:
        type: string
      entrypoint:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      image:
        type: string
      name:
        type: string
      run:
        type: string
      timeout:
        type: string
    required:
    - image
    - name
    type: object
  input.Each:
    properties:
      list:
        type: string
      task:
        $ref: '#/definitions/input.Task'
    required:
    - list
    - task
    type: object
  input.Job:
    properties:
      description:
        type: string
      inputs:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      output:
        type: string
      tasks:
        items:
          $ref: '#/definitions/input.Task'
        minItems: 1
        type: array
    required:
    - name
    - tasks
    type: object
  input.Limits:
    properties:
      cpus:
        type: string
      memory:
        type: string
    type: object
  input.Parallel:
    properties:
      tasks:
        items:
          $ref: '#/definitions/input.Task'
        minItems: 1
        type: array
    required:
    - tasks
    type: object
  input.Retry:
    properties:
      limit:
        maximum: 10
        minimum: 1
        type: integer
    required:
    - limit
    type: object
  input.SubJob:
    properties:
      description:
        type: string
      id:
        type: string
      inputs:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      output:
        type: string
      tasks:
        items:
          $ref: '#/definitions/input.Task'
        type: array
    required:
    - name
    - tasks
    type: object
  input.Task:
    properties:
      cmd:
        items:
          type: string
        type: array
      description:
        type: string
      each:
        $ref: '#/definitions/input.Each'
      entrypoint:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      files:
        additionalProperties:
          type: string
        type: object
      if:
        type: string
      image:
        type: string
      limits:
        $ref: '#/definitions/input.Limits'
      name:
        type: string
      networks:
        items:
          type: string
        type: array
      parallel:
        $ref: '#/definitions/input.Parallel'
      post:
        items:
          $ref: '#/definitions/input.AuxTask'
        type: array
      pre:
        items:
          $ref: '#/definitions/input.AuxTask'
        type: array
      queue:
        type: string
      retry:
        $ref: '#/definitions/input.Retry'
      run:
        type: string
      subjob:
        $ref: '#/definitions/input.SubJob'
      timeout:
        type: string
      var:
        type: string
      volumes:
        items:
          type: string
        type: array
    required:
    - name
    type: object
  mq.QueueInfo:
    properties:
      name:
        type: string
      size:
        type: integer
      subscribers:
        type: integer
      unacked:
        type: integer
    type: object
  tork.EachTask:
    properties:
      completions:
        type: integer
      list:
        type: string
      size:
        type: integer
      task:
        $ref: '#/definitions/tork.Task'
    type: object
  tork.Job:
    properties:
      completedAt:
        type: string
      context:
        $ref: '#/definitions/tork.JobContext'
      createdAt:
        type: string
      description:
        type: string
      error:
        type: string
      execution:
        items:
          $ref: '#/definitions/tork.Task'
        type: array
      failedAt:
        type: string
      id:
        type: string
      inputs:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      output:
        type: string
      parentId:
        type: string
      position:
        type: integer
      result:
        type: string
      startedAt:
        type: string
      state:
        $ref: '#/definitions/tork.JobState'
      taskCount:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/tork.Task'
        type: array
    type: object
  tork.JobContext:
    properties:
      inputs:
        additionalProperties:
          type: string
        type: object
      tasks:
        additionalProperties:
          type: string
        type: object
    type: object
  tork.JobState:
    enum:
    - PENDING
    - RUNNING
    - CANCELLED
    - COMPLETED
    - FAILED
    - RESTART
    type: string
    x-enum-varnames:
    - JobStatePending
    - JobStateRunning
    - JobStateCancelled
    - JobStateCompleted
    - JobStateFailed
    - JobStateRestart
  tork.JobSummary:
    properties:
      completedAt:
        type: string
      createdAt:
        type: string
      description:
        type: string
      error:
        type: string
      failedAt:
        type: string
      id:
        type: string
      name:
        type: string
      output:
        type: string
      parentId:
        type: string
      position:
        type: integer
      result:
        type: string
      startedAt:
        type: string
      state:
        $ref: '#/definitions/tork.JobState'
      taskCount:
        type: integer
    type: object
  tork.Node:
    properties:
      cpuPercent:
        type: number
      hostname:
        type: string
      id:
        type: string
      lastHeartbeatAt:
        type: string
      queue:
        type: string
      startedAt:
        type: string
      status:
        $ref: '#/definitions/tork.NodeStatus'
      taskCount:
        type: integer
      version:
        type: string
    type: object
  tork.NodeStatus:
    enum:
    - UP
    - DOWN
    - OFFLINE
    type: string
    x-enum-varnames:
    - NodeStatusUP
    - NodeStatusDown
    - NodeStatusOffline
  tork.ParallelTask:
    properties:
      completions:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/tork.Task'
        type: array
    type: object
  tork.SubJobTask:
    properties:
      description:
        type: string
      id:
        type: string
      inputs:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      output:
        type: string
      tasks:
        items:
          $ref: '#/definitions/tork.Task'
        type: array
    type: object
  tork.Task:
    properties:
      cmd:
        items:
          type: string
        type: array
      completedAt:
        type: string
      createdAt:
        type: string
      description:
        type: string
      each:
        $ref: '#/definitions/tork.EachTask'
      entrypoint:
        items:
          type: string
        type: array
      env:
        additionalProperties:
          type: string
        type: object
      error:
        type: string
      failedAt:
        type: string
      files:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      if:
        type: string
      image:
        type: string
      jobId:
        type: string
      limits:
        $ref: '#/definitions/tork.TaskLimits'
      name:
        type: string
      networks:
        items:
          type: string
        type: array
      nodeId:
        type: string
      parallel:
        $ref: '#/definitions/tork.ParallelTask'
      parentId:
        type: string
      position:
        type: integer
      post:
        items:
          $ref: '#/definitions/tork.Task'
        type: array
      pre:
        items:
          $ref: '#/definitions/tork.Task'
        type: array
      queue:
        type: string
      result:
        type: string
      retry:
        $ref: '#/definitions/tork.TaskRetry'
      run:
        type: string
      scheduledAt:
        type: string
      startedAt:
        type: string
      state:
        $ref: '#/definitions/tork.TaskState'
      subjob:
        $ref: '#/definitions/tork.SubJobTask'
      timeout:
        type: string
      var:
        type: string
      volumes:
        items:
          type: string
        type: array
    type: object
  tork.TaskLimits:
    properties:
      cpus:
        type: string
      memory:
        type: string
    type: object
  tork.TaskRetry:
    properties:
      attempts:
        type: integer
      limit:
        type: integer
    type: object
  tork.TaskState:
    enum:
    - PENDING
    - SCHEDULED
    - RUNNING
    - CANCELLED
    - STOPPED
    - COMPLETED
    - FAILED
    type: string
    x-enum-varnames:
    - TaskStatePending
    - TaskStateScheduled
    - TaskStateRunning
    - TaskStateCancelled
    - TaskStateStopped
    - TaskStateCompleted
    - TaskStateFailed
host: localhost:8000
info:
  contact:
    email: contact@tork.run
    name: Arik Cohen
    url: https://tork.run
  license:
    name: MIT
    url: https://github.com/runabol/tork/blob/main/LICENSE
  title: Tork API
  version: "1.0"
paths:
  /health:
    get:
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.HealthResponse'
      summary: Shows application health information.
      tags:
      - management
  /jobs:
    get:
      parameters:
      - description: search string
        in: query
        name: q
        type: string
      - description: page number
        in: query
        name: page
        type: integer
      - description: page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tork.JobSummary'
            type: array
      summary: Show a list of jobs
      tags:
      - jobs
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/input.Job'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tork.JobSummary'
      summary: Create a new job
      tags:
      - jobs
  /jobs/{id}:
    get:
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tork.Job'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Get a job by id
      tags:
      - jobs
  /jobs/{id}/cancel:
    put:
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Cancel a running job
      tags:
      - jobs
  /jobs/{id}/restart:
    put:
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/echo.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/echo.HTTPError'
      summary: Restart a cancelled/failed job
      tags:
      - jobs
  /nodes:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/tork.Node'
            type: array
      summary: Get a list of active worker nodes
      tags:
      - nodes
  /queues:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mq.QueueInfo'
            type: array
      summary: get a list of queues
      tags:
      - queues
  /tasks/{id}:
    get:
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tork.Task'
      summary: Get a task by id
      tags:
      - tasks
schemes:
- http
swagger: "2.0"
